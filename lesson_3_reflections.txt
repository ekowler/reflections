Here I am making a new file on GIT

## 1) When would you want to use a remote repository rather that keeping all your work local
I can think of two reasons – the first is to have a backup, so if anything happens to your local machine you aren't totally fuckkacode. The other reason is to collaborate with other people.

## 2) Why might you want to always pull changes manually rather thatn having Git automatically stay up-to-date with your remote repository?

If someone else is working on the same branch as you, and they push their changes and the git automaticalled pulled them down to your computer, the work that you are doing might get overwritten.

## 2) Describe the difference between forks, clones, and branches. When would you use one instead of another?

You use a fork when you want to work on something someone else has started, and is open to sharing. So if someone had already made and app, and I wanted to add a feature to it, I would be able to fork it on git hub.

A clone is how I would get a forked repository off of github and onto my local computer. I would use a clone if I were working with a team, and we were trying to maintain a central repository, but I need to work on the project – adding a feature or whatever.

A branch is something that I would use on a clone. It's the smallest level where I would be making changes to individual lines of code, etcetera.

##3) What is the benefit of having a copy of the last known state of the remote stored locally?

It is useful for when it's time to sync up with the remote. If anyone else has been working with your files, you will want to know what changes you made, what changes they made, and then deal with any conflicts that emerge. To know what has changed since you last made a pull, you will need the record of the last known state of ther remote.

## 4) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

You could use dropbox, and use save as everytime you update a file and include the commits as changes to the file name. You could then sort all the different files by date created to see them in chronological order. I don't think that would really be easier though, because you would have so many different files to navigate through. Git really seems to be the best way to go... because it can show you the differences... I suppose something like google apps would be good, because then you would see all the changes in real time, but you can't roll back to specific points – only the points that the software defines as relevant.

## 5? When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Making changes in a branch preserves the master and safe-gaurds against breaking the code.