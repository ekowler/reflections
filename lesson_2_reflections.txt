#Lession 2 Reflections

##1) What happens when you initialize a repository? Why do you need to do it?

Initializing a repository creates a hidden folder inside whatever directory you are working with. The folder is creates represents the "Repository," in the literal sense that is. Like it were a vessel.

Now, probably after a little bit more configuration we will be able to commit snapshots into this vessel. The program runs in the command line, but it saves the archive inside the folder where the repository lives.

You need to do this in order to use git!

##2)How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is a separate space where you put things that you are going to want to save updates on. With dropbox, there must be some kind of code that tracks the changes you make (in specificed directories) that automatically places changed files into a staging area before periodically (on a schedule, or progammatically when a certain threshold is met) adding them to the repository. This operation happens without the user interacting with the command line.

The value it offers is a way to save disk space when you are working with a particulary large code base. It seem like backing up everything, all the time method could really eat up space.

You only need to commit the files that you actually changed.

##3) How can you use the staging area to make sure you have one commit per logical change?

You can 2x check how many changes you actually made, and then slow down and split them into smaller commits.

##4) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you are working on an experimental version, but are also fixing bugs in your current version. To A/B test different versions of a website or software. If you are making a major interface change.

#A Common WorkFlow is to create a new branch for every new feature

remote branch - created by someone else

##5) Reflecting using visual diagrams

How do diagrams help you visualize the branch structure.

They remind me of a subway system where the tracks only run one way, until they terminate. Maybe a little like lymph. I like how it helps know what features to expect, maybe where you are in the overall progress of your files/project. It would be nice to know if there are programs that can create a visualized map of a repository, without having to use the command line to access it? There is, duh, amazing and god bless the programmers it is free!

## 6) What is the result of merging two branches together? Why do we represent the diagram in the way that we do?

The result of merging two branches together is that the commits from each branch are interleaved together. The new branch should have all the featues of the previous separate branches. We represent the diagram in the way that we do because we need to make sure that we aren't orphaning any commits unintentionally. We may also need to look through the geneaology of a commit in order to see what code is relevanat to the commit, if, for example, the previous chronological commit was merged from a different branch.




